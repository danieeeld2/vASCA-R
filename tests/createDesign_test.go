package tests

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"testing"
)

// Function to run a script and return its output
func runScript(command string, args ...string) (string, error) {
	cmd := exec.Command(command, args...)
	var out bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
		return "", fmt.Errorf("error executing command: %v\nstderr: %s", err, stderr.String())
	}
	return out.String(), nil
}

// Function to read the CSV file and convert it into a matrix of floats
func readCSVToMatrix(filePath string) ([][]float64, error) {
	content, err := os.ReadFile(filePath)
	if err != nil {
		return nil, err
	}
	lines := strings.Split(string(content), "\n")
	var matrix [][]float64
	for _, line := range lines {
		if line != "" {
			fields := strings.Split(line, ",")
			var row []float64
			for _, field := range fields {
				value, err := strconv.ParseFloat(field, 64)
				if err != nil {
					return nil, err
				}
				row = append(row, value)
			}
			matrix = append(matrix, row)
		}
	}
	return matrix, nil
}

// Function to compare two matrices within a tolerance
func compareMatrices(mat1, mat2 [][]float64, tolerance float64) bool {
	if len(mat1) != len(mat2) {
		return false
	}
	for i := 0; i < len(mat1); i++ {
		if len(mat1[i]) != len(mat2[i]) {
			return false
		}
		for j := 0; j < len(mat1[i]); j++ {
			if abs(mat1[i][j]-mat2[i][j]) > tolerance {
				return false
			}
		}
	}
	return true
}

// Helper function to calculate absolute value
func abs(a float64) float64 {
	if a < 0 {
		return -a
	}
	return a
}

// Function to delete the files generated by the scripts
func deleteFiles() {
	os.Remove("design_matrix_matlab.csv")
	os.Remove("design_matrix_r.csv")
}

// Function to check if the files were generated
func filesExist(file string) bool {
	if _, err := os.Stat(file); os.IsNotExist(err) {
		return false
	}
	return true
}

// Test to compare the outputs of the scripts
func TestScriptsComparison(t *testing.T) {
	// Defined combinations of levels and replicates
	testCases := []struct {
		levels     string
		replicates string
	}{
		{"{[1,2,3,4];[1,2,3]}", "4"},
		{"{[1,2,3,4];[1,2]}", "3"},
		{"{[1,2];[1,2,3,4]}", "2"},
		{"{[1,2];[1,2]}", "1"},
	}

	// Fixed tolerance
	tolerance := 1e-6

	// Iterate over the test cases
	for _, testCase := range testCases {
		t.Run(fmt.Sprintf("Levels: %s, Replicates: %s", testCase.levels, testCase.replicates), func(t *testing.T) {
			// Run the Octave script
			_, err := runScript("octave", "--no-gui", "-q", "createDesign_runners/createDesign_run.m", testCase.levels, fmt.Sprintf("%s", testCase.replicates))
			if err != nil {
				t.Fatalf("Error executing Octave script: %v", err)
			}

			// Run the R script. The levels need to be formatted as a list
			rLevels := testCase.levels
			rLevels = strings.ReplaceAll(rLevels, ";", ",")
			rLevels = fmt.Sprintf("{list(c%s)}", rLevels[1:len(rLevels)-1])
			rLevels = strings.ReplaceAll(rLevels, "[", "(")
			rLevels = strings.ReplaceAll(rLevels, "]", ")")
			rLevels = strings.ReplaceAll(rLevels, "),(", "), c(")
			// Print the levels for debug
			fmt.Println(rLevels)
			_, err = runScript("Rscript", "./createDesign_runners/createDesign_run.R", rLevels, testCase.replicates)
			if err != nil {
				t.Fatalf("Error executing R script: %v", err)
			}

			// Check that the files were generated
			if !filesExist("design_matrix_matlab.csv") || !filesExist("design_matrix_r.csv") {
				t.Fatalf("The files were not generated by the scripts")
			}

			// Read the matrices generated by both scripts
			octaveMatrix, err := readCSVToMatrix("design_matrix_matlab.csv")
			if err != nil {
				t.Fatalf("Error reading Octave file: %v", err)
			}

			rMatrix, err := readCSVToMatrix("design_matrix_r.csv")
			if err != nil {
				t.Fatalf("Error reading R file: %v", err)
			}

			// Compare the matrices with the fixed tolerance
			if !compareMatrices(octaveMatrix, rMatrix, tolerance) {
				t.Fatalf("The matrices generated by Octave and R do not match within the tolerance %e", tolerance)
			}
		})

		// Delete the files generated by the scripts
		deleteFiles()
	}
}
