#!/bin/bash
# Parameter configuration
MODELS=("linear" "interaction" "full")
PERMS=(100 500 1000 2000 5000 10000 20000 50000 100000)
BENCHMARK_DIR="parglmVS_benchmark"
OUTPUT_FILE="$BENCHMARK_DIR/benchmark_results.csv"
R_SCRIPT="./parglmVS_runners/parglmVS_run.R"
OCTAVE_SCRIPT="./parglmVS_runners/parglmVS_run.m"
X_DATA="../datasets/tests_datasets/X_test.csv"
F_DATA="../datasets/tests_datasets/F_test.csv"

# Create benchmark directory if it doesn't exist
mkdir -p "$BENCHMARK_DIR"

# Verify that files exist
if [ ! -f "$R_SCRIPT" ]; then
    echo "Error: $R_SCRIPT not found"
    exit 1
fi

if [ ! -f "$OCTAVE_SCRIPT" ]; then
    echo "Error: $OCTAVE_SCRIPT not found"
    exit 1
fi

if [ ! -f "$X_DATA" ]; then
    echo "Error: $X_DATA not found"
    exit 1
fi

if [ ! -f "$F_DATA" ]; then
    echo "Error: $F_DATA not found"
    exit 1
fi

# Create results file with header
echo "Language,Model,Permutations,Time(s)" > $OUTPUT_FILE

# Benchmark for R
for model in "${MODELS[@]}"; do
    for perm in "${PERMS[@]}"; do
        echo "Running R with Model=$model, Permutations=$perm..."
        TIME=$( { time Rscript $R_SCRIPT $X_DATA $F_DATA Model $model Permutations $perm >/dev/null 2>&1; } 2>&1 | grep real | awk '{print $2}' | sed 's/m/*60+/g' | sed 's/s//g' | bc)
        echo "R,$model,$perm,$TIME" >> $OUTPUT_FILE
        # Remove any CSV files generated by R script
        find . -name "parglmVS_*.csv" -type f -delete
    done
done

# Benchmark for Octave (MATLAB compatible)
for model in "${MODELS[@]}"; do
    for perm in "${PERMS[@]}"; do
        echo "Running Octave with Model=$model, Permutations=$perm..."
        TIME=$( { time octave --no-gui -q $OCTAVE_SCRIPT $X_DATA $F_DATA Model $model Permutations $perm >/dev/null 2>&1; } 2>&1 | grep real | awk '{print $2}' | sed 's/m/*60+/g' | sed 's/s//g' | bc)
        echo "Octave,$model,$perm,$TIME" >> $OUTPUT_FILE
        # Remove any CSV files generated by Octave script
        find . -name "parglmVS_*.csv" -type f -delete
    done
done

echo "Benchmark completed. Results in $OUTPUT_FILE"

# Generate comparative plots with R
cat > $BENCHMARK_DIR/plot_benchmarks.R << EOF
library(ggplot2)

# Read the data
data <- read.csv("$OUTPUT_FILE")

# Convert time to numeric if not already
data\$Time <- as.numeric(data\$Time.s.)

# Define a white background theme with grid lines
white_theme <- theme_bw() +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    legend.background = element_rect(fill = "white"),
    legend.key = element_rect(fill = "white"),
    panel.grid.major = element_line(color = "grey90"),
    panel.grid.minor = element_line(color = "grey95"),
    axis.line = element_line(color = "black"),
    text = element_text(color = "black"),
    axis.text = element_text(color = "black"),
    plot.title = element_text(face = "bold", size = 14),
    legend.position = "right"
  )

# Create a combined plot for all models
p1 <- ggplot(data, aes(x=Permutations, y=Time, color=Language, shape=Model)) +
  geom_point(size=3) +
  geom_line(aes(linetype=Model)) +
  labs(title="Execution Time Comparison between R and Octave",
       x="Number of permutations",
       y="Execution time (seconds)") +
  scale_color_brewer(palette="Set1") +
  scale_x_log10(breaks = unique(data\$Permutations), 
                labels = scales::comma(unique(data\$Permutations))) +
  white_theme

# Save the combined plot
ggsave("$BENCHMARK_DIR/benchmark_comparison_all.png", p1, width=12, height=8, bg="white")

# Create separate plots for each model
for (model_name in unique(data\$Model)) {
  subset_data <- data[data\$Model == model_name,]
  p2 <- ggplot(subset_data, aes(x=Permutations, y=Time, color=Language)) +
    geom_point(size=3) +
    geom_line(linewidth=1) +
    labs(title=paste("Model:", model_name),
         x="Number of permutations",
         y="Execution time (seconds)") +
    scale_color_brewer(palette="Set1") +
    scale_x_log10(breaks = unique(subset_data\$Permutations), 
                  labels = scales::comma(unique(subset_data\$Permutations))) +
    white_theme
  
  ggsave(paste0("$BENCHMARK_DIR/benchmark_", model_name, ".png"), p2, width=10, height=6, bg="white")
}

# Create bar chart to compare models grouped by language
p3 <- ggplot(data, aes(x=Model, y=Time, fill=Language)) +
  geom_bar(stat="identity", position="dodge") +
  facet_wrap(~Permutations, scales="free_y") +
  labs(title="Model comparison by number of permutations",
       x="Model",
       y="Execution time (seconds)") +
  scale_fill_brewer(palette="Set1") +
  theme_bw() + 
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background = element_rect(fill = "white"),
    legend.background = element_rect(fill = "white"),
    strip.background = element_rect(fill = "lightgrey"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(face = "bold", size = 14)
  )

ggsave("$BENCHMARK_DIR/benchmark_models_by_permutations.png", p3, width=14, height=10, bg="white")

# Create a log-scale plot to better visualize performance across all permutation ranges
p4 <- ggplot(data, aes(x=Permutations, y=Time, color=Language, shape=Model)) +
  geom_point(size=3) +
  geom_line(aes(linetype=Model)) +
  labs(title="Execution Time Comparison (Log-Log Scale)",
       x="Number of permutations (log scale)",
       y="Execution time (seconds, log scale)") +
  scale_color_brewer(palette="Set1") +
  scale_x_log10(breaks = unique(data\$Permutations), 
                labels = scales::comma(unique(data\$Permutations))) +
  scale_y_log10() +
  white_theme

ggsave("$BENCHMARK_DIR/benchmark_comparison_logscale.png", p4, width=12, height=8, bg="white")
EOF

# Run R script to generate plots
echo "Generating comparative plots..."
Rscript $BENCHMARK_DIR/plot_benchmarks.R

echo "Analysis complete. The following plots have been generated in $BENCHMARK_DIR:"
echo "- benchmark_comparison_all.png (General comparison)"
echo "- benchmark_comparison_logscale.png (Log-scale comparison)"
echo "- benchmark_linear.png (Linear model)"
echo "- benchmark_interaction.png (Interaction model)"
echo "- benchmark_full.png (Full model)"
echo "- benchmark_models_by_permutations.png (Comparison by permutations)"